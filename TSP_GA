clear all;
clc;
global x y;

%初始化
cityfile = fopen( 'city32_gz.txt', 'rt' );
cities = fscanf( cityfile, '%f %f', [2,inf] );
fclose(cityfile);
x = cities(1,:);
y =cities(2,:);
N = size(cities,2); % 城市数量
t = N + 1; 
s = 1500; % 种群数
G = 300; %遗传代数
c = 25; %选择个体数

pc = 0.8; % 交叉概率
pm = 0.1; % 变异概率

popmin_value = zeros(1,G);

% 种群初始化
population = zeros(s,t);
for i = 1 : s
    population(i , 1 : t-1) = randperm(N);
end

G_num_break = 0;
for i = 1 : G
    
    % 计算城市间的距离
    population = TSP_dist(population);
    
    %选择
    pop_max = zeros(1,c);
    pop_min = zeros(1,c);
    pop_temp1 = (population(:,t))';
    pop_temp2 = pop_temp1;
    for count = 1 : c
        [a,pop_max(count)] = max(pop_temp1);
        [b,pop_min(count)] = min(pop_temp2);
        pop_temp1(pop_max(count)) = 0;
        pop_temp2(pop_min(count)) = a; 
        population(pop_max(count),:) = population(pop_min(count),:);
    end
        
    %%%%%%% 交叉（有序交叉法）%%%%%%
    p1 = rand;
    if p1 < pc
        pop_temp = population;
        n = randperm(s);  %将种群随机排序
        for count = 1 : 2 : s
            % 交叉之随机选取交叉点
            m = randperm(N-2)+1;
            cross_point1 = min(m(1),m(2));
            cross_point2 = max(m(1),m(2));
            
            %%个体n(count) 与 个体n(count+1)的交叉
            %两个个体左边互换
            temp = pop_temp(n(count), 1:cross_point1);
            pop_temp(n(count), 1:cross_point1) = pop_temp(n(count+1), 1:cross_point1);
            pop_temp(n(count+1), 1:cross_point1) = temp;
            %两个个体右边互换
            temp = pop_temp(n(count), cross_point2+1:t);
            pop_temp(n(count), cross_point2+1:t) = pop_temp(n(count+1), cross_point2+1:t);
            pop_temp(n(count+1), cross_point2+1:t) = temp;
            %n(count)个体左边重复性检查
            for j = 1 : cross_point1
                while find(pop_temp(n(count),j) == pop_temp(n(count),cross_point1+1:cross_point2))
                    re_point = find(pop_temp(n(count),j) == pop_temp(n(count),cross_point1+1:cross_point2));
                    temp = pop_temp(n(count+1),cross_point1+re_point);
                    pop_temp(n(count),j) = temp;
                end
            end
             %n(count)个体右边重复性检查
            for j = cross_point2 + 1 : N 
                while find(pop_temp(n(count),j) == pop_temp(n(count),cross_point1+1:cross_point2))
                    re_point = find(pop_temp(n(count),j) == pop_temp(n(count),cross_point1+1:cross_point2));
                    temp = pop_temp(n(count+1),cross_point1+re_point);
                    pop_temp(n(count),j) = temp;
                end
            end
             %n(count+1)个体左边重复性检查
            for j = 1 : cross_point1
                while find(pop_temp(n(count+1),j) == pop_temp(n(count+1),cross_point1+1:cross_point2))
                    re_point = find(pop_temp(n(count+1),j) == pop_temp(n(count+1),cross_point1+1:cross_point2));
                    temp = pop_temp(n(count),cross_point1+re_point);
                    pop_temp(n(count+1),j) = temp;
                end
            end
            
            %n(count+1)个体右边重复性检查
            for j = cross_point2 + 1 : N
                while find(pop_temp(n(count+1),j) == pop_temp(n(count+1),cross_point1+1:cross_point2))
                    re_point = find(pop_temp(n(count+1),j) == pop_temp(n(count+1),cross_point1+1:cross_point2));
                    temp = pop_temp(n(count),cross_point1+re_point);
                    pop_temp(n(count+1),j) = temp;
                end
            end
        end
        %经过交叉后，选取最优者
        pop_temp = TSP_dist(pop_temp);
        for count = 1:s
            if pop_temp(count,t) < population(count, t)
                population(count,:) = pop_temp(count,:);
            end
        end
      
    end
    % 变异（倒置变异法）
    p2 = rand;
    if p2 < pm
        pop_temp = population;
        for count = 1:s
            % 变异之随机选取交叉点
            m = randperm(N-2)+1;
            muta_point1 = min(m(1),m(2));
            muta_point2 = max(m(1),m(2));
            %将muta_point1与muta_point2之间的个体倒置
            pop_temp(count, muta_point1+1:muta_point2-1) = fliplr(pop_temp(count, muta_point1+1:muta_point2-1));
        end
         %经过变异后，选取最优者
        pop_temp = TSP_dist(pop_temp);
        for count = 1:s
            if pop_temp(count,t) < population(count, t)
                population(count,:) = pop_temp(count,:);
            end
        end
    end
    %用图像动态表示路径变化过程
    [a,pmin] = min(population(:,t));
    popmin = population(pmin,:);
    popmin_value(i) = population(pmin,t);
    figure(1);
    for count = 1 : N-1
        plot([x(popmin(count)),x(popmin(count+1))],[y(popmin(count)),y(popmin(count+1))],'rs-','LineWidth',2);
        hold on;
    end
    plot([x(popmin(N)),x(popmin(1))],[y(popmin(N)),y(popmin(1))],'rs-','LineWidth',2);
    hold off; 
    if i ~= 1
        figure(2);
        plot([i-1,i],[popmin_value(i-1),popmin_value(i)],'r-');
        hold on;
        if popmin_value(i) - popmin_value(i-1) == 0
            G_num_break = G_num_break + 1;
        else
            G_num_break = 0;
        end
    end
    pause(0.1);
    if G_num_break == 20
        break;
    end
end

disp('最优路径为：');
disp(population(pmin,1:N));
disp('最短距离为：');
disp(popmin_value(i));

% 计算城市间距离
function [population] = TSP_dist(population)
    global x y;
    [s,t]= size(population);
    N = t-1;
    for unit_num = 1 : s
        city_dist = 0;
        pop_temp = population(unit_num,1:N);
        pop_temp = [pop_temp, population(unit_num,1)];
        for city_num = 1 : N
            city_dist = city_dist + sqrt(  (x(pop_temp(city_num)) - x(pop_temp(city_num + 1)) )^2 + (y(pop_temp(city_num)) - y(pop_temp(city_num + 1)))^2  );
        end
        population(unit_num , t) = city_dist;
    end
end
